// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}
model User {
  id            Int    @id @default(autoincrement())
  name          String?
  phone String? @unique 
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  nickName String?
  birth String?
  password String?
  accounts       Account[]
  sessions      Session[]
  like Like[]
  tweets Tweet[]
  comments Comment[]
  followers User[] @relation("FollowRelation")
  following User[] @relation("FollowRelation")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tweet {
  id              Int         @id @default(autoincrement())
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  retweetId    Int? @unique
  retweet      Tweet?        @relation("RetweetRelation", fields: [retweetId], references: [id])
  originTweet Tweet? @relation("RetweetRelation")
  payload String
  photo String?
  like Like[]
  comments Comment[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}
model Like {
  id        Int      @id @default(autoincrement())
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  tweet   Tweet  @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  tweetId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Comment {
  id        Int      @id @default(autoincrement())
  payload String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  tweet   Tweet  @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  tweetId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Token {
  id        Int      @id @default(autoincrement())
  number   String   @unique
  phone String? @unique 
  email String? @unique 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}